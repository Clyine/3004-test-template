from concurrent import futures
import logging

import grpc
import system_pb2
import system_pb2_grpc

#Create a class that inherits the Servicer object from the generated stub
class SystemServicer(system_pb2_grpc.SystemServicer):
    #Implement all endpoints from protofile
    #Should be auto generated by default to return the default values
    
    def __init__(self) -> None:
        self.itemdb = {}
        
    def doList(self, request, context):
        itemName = request.itemName
        self.itemdb[itemName] = {"bidder": "none", "price": 0}
        if not self.itemdb[itemName] == None:
            return system_pb2.result(text="Sucessfully Added " + itemName)
        else:
            return system_pb2.result(text="Listing Failed")
    
    def doQuery(self, request, context):
        list = []
        for i in self.itemdb:
            list.append([i, self.itemdb.get(i).get("bidder"), self.itemdb.get(i).get("price")])
            
        fstr = ""
        for i in list:
            fstr = fstr + " ".join(str(x) for x in i)+", "
                
        return system_pb2.result(text=fstr)
    
    def doBid(self, request, context):
        itemName = request.itemName
        nBidder = request.bidder
        nPrice = request.price
        
        if nPrice <= 0:
            return system_pb2.result(text="Error, Price must be greater than 0")
        
    
        if not itemName in self.itemdb.keys():
            return system_pb2.result(text="Error, Item not found")
        
        if self.itemdb.get(itemName).get("price") > nPrice:
            return system_pb2.result(text="Error, bid lower than highest")
        
        
        self.itemdb[itemName] = {"bidder": nBidder, "price": nPrice}    
        return system_pb2.result(text="Bid sucessfully added")
    
#Starts a thread to listen on indicated port
def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    #To replace accordingly if Service name changed in protofile
    system_pb2_grpc.add_SystemServicer_to_server(
        SystemServicer(), server)
    server.add_insecure_port('[::]:50051')
    server.start()
    server.wait_for_termination()

#runs the thread
if __name__ == '__main__':
    logging.basicConfig()
    serve()